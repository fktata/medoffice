<?php

namespace AppBundle\Repository;

/**
 * RdvRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RdvRepository extends \Doctrine\ORM\EntityRepository
{
    public function getRdvAgenda()
    {
        $now = new \DateTime(date("Y-m-d") . " 00:00:00");
        $qb = $this->_em->createQueryBuilder()
            ->addSelect('r.date')
            ->from("AppBundle:Rdv", 'r')
            ->leftJoin("r.patient", 'patient')
            ->AddSelect(array('patient.name as note'))
            ->where("r.date > :now")
            ->setParameter('now', $now);
        $rdvAgenda = $qb->getQuery()->getArrayResult();
        for ($i = 0; $i < count($rdvAgenda); $i++) {
            $rdvAgenda[$i]['type'] = "RDV";
        }
        return $rdvAgenda;
    }

    public function getFiltredRdvAgenda($startDate, $endDate)
    {
        $qb = $this->_em->createQueryBuilder()
            ->addSelect('r.date')
            ->from("AppBundle:Rdv", 'r')
            ->leftJoin("r.patient", 'patient')
            ->AddSelect(array('patient.name as note'))
            ->where("r.date >= :startDate")
            ->andWhere("r.date <= :endDate")
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate);
        $rdvAgenda = $qb->getQuery()->getArrayResult();
        for ($i = 0; $i < count($rdvAgenda); $i++) {
            $rdvAgenda[$i]['type'] = "RDV";
        }
        return $rdvAgenda;
    }

    public function getRdvToday()
    {
        $startDate = new \DateTime(date("Y-m-d") . " 00:00:00");
        $endDate = new \DateTime(date("Y-m-d") . " 23:59:59");
        $qb = $this->_em->createQueryBuilder()
            ->Select('r')
            ->from("AppBundle:Rdv", 'r')
            ->where("r.date >= :startDate")
            ->andWhere("r.date <= :endDate")
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->orderBy('r.date');
        return $qb->getQuery()->getResult();
    }

    public function getRdvByStatus($status)
    {
        $startDate = new \DateTime(date("Y-m-d") . " 00:00:00");
        $endDate = new \DateTime(date("Y-m-d") . " 23:59:59");
        $qb = $this->_em->createQueryBuilder()
            ->Select('COUNT(r)')
            ->from("AppBundle:Rdv", 'r')
            ->where("r.status = :status")
            ->andWhere("r.date >= :startDate")
            ->andWhere("r.date <= :endDate")
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->setParameter('status', $status)
            ->orderBy('r.date');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getCurrentRdv()
    {
        $startDate = new \DateTime(date("Y-m-d") . " 00:00:00");
        $endDate = new \DateTime(date("Y-m-d") . " 23:59:59");
        $qb = $this->_em->createQueryBuilder()
            ->Select('r.date')
            ->from("AppBundle:Rdv", 'r')
            ->where("r.status = :current")
            ->andWhere("r.date >= :startDate")
            ->andWhere("r.date <= :endDate")
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->setParameter('current', 'current')
            ->orderBy('r.date');
        $current = $qb->getQuery()->getResult();
        $qb = $this->_em->createQueryBuilder()
            ->Select('r.date')
            ->from("AppBundle:Rdv", 'r')
            ->leftJoin("r.patient", 'patient')
            ->AddSelect(array('patient.name as patientname'))
            ->where("r.status = :waiting")
            ->andWhere("r.date >= :startDate")
            ->andWhere("r.date <= :endDate")
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->setParameter('waiting', 'waiting');
        $waiting = $qb->getQuery()->getArrayResult();
        if ($current) {
            $current = $current[0]['date'];
            for ($i = 0; $i < count($waiting); $i++) {
                $diff = strtotime($waiting[$i]['date']->format('Y-m-d H:i:s')) - strtotime($current->format('Y-m-d H:i:s'));
                $waiting[$i]['waiting_time'] = $diff - strtotime('02:00:00');
            }
            return $waiting;
        } else {
            for ($i = 0; $i < count($waiting); $i++) {
                $waiting[$i]['waiting_time'] = '00:00:00';
            }
            return $waiting;
        }
    }
}
